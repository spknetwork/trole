version: '3.8'

services:
  ipfs:
    image: ipfs/kubo:v0.26.0
    restart: unless-stopped
    environment:
      - IPFS_PATH=/data/ipfs
    ports:
      - "4001:4001"
      - "127.0.0.1:8080:8080"  # Only bind to localhost
      - "127.0.0.1:5001:5001"  # API only accessible locally
    command: ["daemon", "--migrate=true", "--agent-version-suffix=docker", "--enable-gc"]
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - trole_network
    container_name: trole_ipfs
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: false  # IPFS needs write access
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  poa:
    image: disregardfiat/poa:0.0.2
    restart: unless-stopped
    command: ["./main", "-node", "2", "-username", "${ACCOUNT}", "-WS_PORT=8002", "-useWS=true", "-honeycomb=true", "-IPFS_PORT=5001", "-validators", "https://spktest.dlux.io/services/VAL"]
    ports:
      - "127.0.0.1:8002:8002"  # Only bind to localhost
    networks:
      - trole_network
    container_name: trole_poa
    depends_on:
      ipfs:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  trole_api:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - PORT=5050
      - ENDPOINT=ipfs
      - ENDPORT=5001
      - DOCKER=true
      - NODE_ENV=production
    ports: 
      - "127.0.0.1:5050:5050"  # Only bind to localhost
    volumes:
      - ./.env:/.env:ro
      - trole_db:/app/db/
    networks:
      - trole_network
    container_name: trole_api
    depends_on:
      ipfs:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Optional: Reverse proxy (uncomment if needed)
  # nginx:
  #   image: nginx:1.25-alpine
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./certs:/etc/nginx/certs:ro
  #   depends_on:
  #     - trole_api
  #   networks:
  #     - trole_network
  #   container_name: trole_nginx

volumes:
  ipfs_data:
    driver: local
  trole_db:
    driver: local

networks:
  trole_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: trole_br 